<?php

namespace Tests\Unit;

use App\Models\Comment;
use App\Models\User;
use App\Services\CommentService\CommentService;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Artisan;
use Symfony\Component\HttpFoundation\ParameterBag;
use Tests\TestCase;

class CommentServiceTest extends TestCase
{
    private CommentService $commentService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Artisan::call('migrate');
        Artisan::call('migrate:refresh');
        Artisan::call('db:seed');
        $this->commentService = App::make(CommentService::class);
    }

    public function test_getCommentsByPostId(): void
    {
        $user = User::factory()->create();
        $request = new Request();

        $request->setUserResolver(function() use ($user) { return $user; });

        $comments = $this->commentService->getCommentsByPostId($request, $id = 1);

        $this->assertInstanceOf(Collection::class, $comments);
        $this->assertEquals($user->id, $comments[0]->requestUserId);
    }

    public function test_create(): void
    {
        $commentArray = [
            'commentText' => 'commentText',
            'postId' => 1
        ];

        $comments = $this->createComment($commentArray);

        $this->assertInstanceOf(Comment::class, $comments);
        $this->assertDatabaseHas('comments', ['comment_text' => $commentArray['commentText'], 'post_id' => $commentArray['postId']]);
    }

    public function test_update(): void
    {
        $user = User::factory()->create();
        $request = new Request();

        $request->setUserResolver(function() use ($user) { return $user; });

        $commentArray = [
            'commentText' => 'commentText',
            'postId' => 1
        ];

        $comment = $this->createComment($commentArray);

        $updateCommentArray = [
            'commentText' => 'updatedCommentText',
            'commentId' => $comment->id,
        ];

        $json = new ParameterBag($updateCommentArray);
        $request->setJson($json);

        $updatedComment = $this->commentService->update($request);

        $this->assertEquals($updateCommentArray['commentId'], $updatedComment->id);
        $this->assertEquals($updateCommentArray['commentText'], $updatedComment->comment_text);
    }

    public function test_delete(): void
    {
        $user = User::factory()->create();
        $request = new Request();

        $request->setUserResolver(function() use ($user) { return $user; });

        $commentArray = [
            'commentText' => 'commentText',
            'postId' => 1
        ];

        $comment = $this->createComment($commentArray);

        $json = new ParameterBag(['commentId' => $comment->id]);
        $request->setJson($json);

        $this->commentService->delete($request);

        $this->assertDatabaseMissing('comments', ['id' => $comment->id]);
    }

    private function createComment(array $commentArray): Comment
    {
        $user = User::factory()->create();
        $request = new Request();

        $request->setUserResolver(function() use ($user) { return $user; });

        $json = new ParameterBag($commentArray);
        $request->setJson($json);

        return $this->commentService->create($request);
    }
}
